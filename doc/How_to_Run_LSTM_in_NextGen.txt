S.D. Peckham
September 12, 2022

-------------------------------------------
 Steps to run the LSTM Package in NextGen
-------------------------------------------
(1) Set PYTHONPATH via:
       (base) % export PYTHONPATH='/Users/peckhams/Dropbox/GitHub/ngen/extern/lstm_py'
       (base) % echo $PYTHONPATH
            /Users/peckhams/Dropbox/GitHub/ngen/extern/lstm_py
    Now it doesn't matter if you activate a virtual environment.  ##### what about dependencies?
    Notice that as a result of setting PYTHONPATH, if you now type:
       (base) % pip list
    you will see "lstm" in the list of packages.

(2)  Edit the file:  ngen/data/lstm/realization_config_lstm_cat67a.json, as follows:
     If ngen/extern/lstm_py/lstm/__init__.py is empty, then set:
         "python_type": "lstm.bmi_lstm.bmi_LSTM",
         "model_type_name": "bmi_LSTM",
     If ngen/extern/lstm_py/lstm/__init__.py contains the line:
         from .bmi_lstm import bmi_LSTM
     then set:
         "python_type": "lstm.bmi_LSTM",
         "model_type_name": "bmi_LSTM",

     Set:
         "init_config": "./extern/lstm_py/bmi_config_files/cat-67.yml",
         "main_output_variable": "land_surface_water__runoff_volume_flux",

     In the "variable_names_map" block, add the line:
         "streamflow_cms: "land_surface_water__runoff_volume_flux",
     We do *not* need to add:
        "water_input": "atmosphere_water__liquid_equivalent_precipitation_rate",

     Set:
            "forcing": {
                "path": "./data/forcing/cat-67_2015-12-01 00_00_00_2015-12-30 23_00_00.csv"

(3) Edit the file:  ngen/extern/lstm_py/bmi_config_files/cat-67.yml, to be:
    time_step: '1 hour'
    initial_state: 'zero'
    basin_name: 'cat-67'
    basin_id: 'cat-67'
    area_sqkm: 10.09406319443798
    lat: 46.528817831207256
    lon: -69.2994875283471
    #train_cfg_file: ./trained_neuralhydrology_models/hourly_slope_mean_precip_temp/config.yml
    train_cfg_file: ./extern/lstm_py/trained_neuralhydrology_models/hourly_A/config.yml
    verbose: 1
    elev_mean: 316.713505221
    slope_mean: 5.07506774

(4) In the file:  ngen/extern/lstm_py/lstm/bmi_lstm.py, near line 77 in _input_var_names,
    make this change:
    'atmosphere_water__liquid_equivalent_precipitation_rate',  # (SDP, 08/30/22)
    ### 'atmosphere_water__time_integral_of_precipitation_mass_flux',  # (SDP)

(5) (base) % cd ngen
    (base) % ./cmake_build/ngen ./data/catchment_data_cat67.geojson "cat-67" ./data/nexus_data_nex65.geojson "nex-65" ./data/lstm/realization_config_lstm_cat67.json

#### NextGen Output ####
NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
Catchment topology is dendridic.
Running Models
Running timestep 0
Running timestep 100
Running timestep 200
Running timestep 300
Running timestep 400
Running timestep 500
Running timestep 600
Running timestep 700
Finished 720 timesteps.
ngen(54702,0x10ddc0dc0) malloc: *** error for object 0x7f95afd54740: pointer being freed was not allocated
ngen(54702,0x10ddc0dc0) malloc: *** set a breakpoint in malloc_error_break to debug
zsh: abort      ./cmake_build/ngen ./data/catchment_data_cat67.geojson "cat-67"  "nex-65" 

#### Output files generated in ngen folder ####
cat-67.csv  (34537 bytes)
nex-65_output.csv (24288 bytes)

(6) This also works, where in the realization config file (realization_config_lstm_cat67b.json)
    we instead use a cat-67.csv that spans start and end times:
    (base) % cd ngen
    (base) % ./cmake_build/ngen ./data/catchment_data_cat67.geojson "cat-67" ./data/nexus_data_nex65.geojson "nex-65" ./data/lstm/realization_config_lstm_cat67b.json

--------------------------------------------------------------------
 Steps to run the LSTM Package in NextGen for All HUC01 Catchments
--------------------------------------------------------------------

(1) From the Amazon S3 bucket, download the folder that has LSTM YML config files
    for every HUC01 catchment:  formulations-dev > HUC01 > LSTM  
    (This can be done with Cyberduck, as explained in another doc.)

(2) Copy this LSTM folder to:
        ngen/extern/lstm_py/bmi_config_files/HUC01

(3) Download the files "catchment_data.geojson" and "nexus_data.geojson" from:
    formulations-dev > HUC01
    Copy them into:  ngen/data  with the new names:
        catchment_data_HUC01.geojson
        nexus_data_HUC01.geojson

    NOTE:  Each ID (e.g. "cat-27") that appears in:
        ngen/data/lstm/realization_config_lstm.json
    must have a corresponding entry in these two files.
    (So older versions of these geojson files may not work.)

(4) Each YML file in:  ngen/extern/lstm_py/bmi_config_files/HUC01
    has the line:
    train_cfg_file: ./trained_neuralhydrology_models/hourly_slope_mean_precip_temp/config.yml
    Since we'll be running NextGen from the ngen folder, first make sure that the
    trained_neuralhydrology_models folder contains this folder and file, then
    create a symbolic link in the ngen folder with the command:
    % ln -s ./extern/lstm_py/trained_neuralhydrology_models ./trained_neuralhydrology_models

(5) Create a realization config file (ngen/data/lstm/realization_config_lstm_HUC01.json) for
    LSTM that uses the "{{id}}" regular expression to set "init_config", and that uses
    the same forcing file (December 2015) for all catchments.  Here it is:

{
    "global": {
      "formulations":
      [
        {
          "name": "bmi_python",
          "params": {
              "python_type": "lstm.bmi_LSTM",
              "model_type_name": "bmi_LSTM",
              "init_config": "./extern/lstm_py/bmi_config_files/HUC01/{{id}}.yml",
              "main_output_variable": "land_surface_water__runoff_volume_flux",
              "uses_forcing_file": false,
              "variables_names_map" : {
                  "streamflow_cms": "land_surface_water__runoff_volume_flux"},
              "pytorch_model_path": "./data/lstm/sugar_creek_trained.pt",
              "normalization_path": "./data/lstm/input_scaling.csv",
              "initial_state_path": "./data/lstm/initial_states.csv",
              "useGPU": false
        }
      }
      ],
        "forcing": {
            "path": "./data/forcing/cat-67_2015-12-01 00_00_00_2015-12-30 23_00_00.csv"
        }
    },
    "time": {
        "start_time": "2015-12-01 00:00:00",
        "end_time": "2015-12-30 23:00:00",
        "output_interval": 3600
    }
}
----------------------------------------------------------------------------------------------
   
(6) Now type this command, where "" indicates all catchments:

    (base) % cd ngen
    (base) % ./cmake_build/ngen ./data/catchment_data_HUC01.geojson "" ./data/nexus_data_HUC01.geojson "" ./data/lstm/realization_config_lstm_HUC01.json

#### NextGen Output to Console ####
NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
Catchment topology is dendridic.
Running Models
Running timestep 0
Running timestep 100
Running timestep 200
Running timestep 300
Running timestep 400
Running timestep 500
Running timestep 600
Running timestep 700
Finished 720 timesteps.
ngen(83496,0x10c5c0dc0) malloc: *** error for object 0x7fb70f2f29e0: pointer being freed was not allocated
ngen(83496,0x10c5c0dc0) malloc: *** set a breakpoint in malloc_error_break to debug
zsh: abort      ./cmake_build/ngen ./data/catchment_data_HUC01.geojson ""  "" 
#### Output Files (CSV) in the ngen Folder #####
{{id}}.csv

######################################################
HOW DO WE SPECIFY AN OUTPUT FOLDER FOR CSV FILES ??
(like ./LSTM_CSV.  See: https://github.com/NOAA-OWP/ngen/issues/374
######################################################

(7) This also works, but is somewhat slower:
    (base) % cd ngen
    (base) % ./cmake_build/ngen ./data/catchment_data_HUC01.geojson "cat-67" ./data/nexus_data_HUC01.geojson "nex-65" ./data/lstm/realization_config_lstm_cat67b.json


----------------------------------------------------
ATTEMPTS TO ELIMINATE THE "POINTER" ERROR MESSAGE:
----------------------------------------------------
(1) In the file: bmi_lstm.py, made this change:
    # _output_var_names = ['land_surface_water__runoff_depth', 
    #                     'land_surface_water__runoff_volume_flux']
    _output_var_names = ['land_surface_water__runoff_volume_flux']
    but it didn't help.
(2) In the file: bmi_lstm.py, made this change:
#     _input_var_names = [
#         'land_surface_radiation~incoming~longwave__energy_flux',
#         'land_surface_air__pressure',
#         'atmosphere_air_water~vapor__relative_saturation',
#         'atmosphere_water__liquid_equivalent_precipitation_rate',  ### SDP, 08/30/22
#         ##### 'atmosphere_water__time_integral_of_precipitation_mass_flux',  #### SDP
#         'land_surface_radiation~incoming~shortwave__energy_flux',
#         'land_surface_air__temperature',
#         'land_surface_wind__x_component_of_velocity',
#         'land_surface_wind__y_component_of_velocity']
    _input_var_names = []
    but it didn't help. 

---------------------------------------------------------------------------------------------
(*) NOTE:  Going forward, in order to use forcing from NextGen, may need to add this
    block to the realization config file:
                  "RAINRATE": "atmosphere_water__liquid_equivalent_precipitation_rate",
                  "T2D":      "land_surface_air__temperature",
                  "Q2D":      "atmosphere_air_water~vapor__relative_saturation",
                  "U2D":      "land_surface_wind__x_component_of_velocity",
                  "V2D":      "land_surface_wind__y_component_of_velocity",
                  "PSFC":     "land_surface_air__pressure",
                  "SWDOWN":   "land_surface_radiation~incoming~shortwave__energy_flux",
                  "LWDOWN":   "land_surface_radiation~incoming~longwave__energy_flux",

---------------------------------------------------------------------------------------------

